/**
 * 模板变量系统
 * 处理ST预设中的模板变量，如 {{setvar::name::value}} 和 {{getvar::name}}
 */

import { z } from "zod"

/**
 * 模板变量类型定义
 */
export interface TemplateVariable {
  name: string
  value: string
  type: 'setvar' | 'getvar' | 'simple'
  line?: number
  source?: string
}

/**
 * 模板处理选项
 */
export interface TemplateProcessingOptions {
  /** 是否启用严格模式（未定义变量报错） */
  strict?: boolean
  /** 是否移除未处理的模板 */
  removeUnprocessed?: boolean
  /** 自定义变量值 */
  variables?: Record<string, string>
  /** 是否保留变量定义（setvar）在最终输出中 */
  keepVariableDefinitions?: boolean
  /** 递归处理最大深度 */
  maxRecursionDepth?: number
}

/**
 * 模板处理结果
 */
export interface TemplateProcessingResult {
  /** 处理后的文本 */
  processedText: string
  /** 所有找到的变量 */
  variables: TemplateVariable[]
  /** 设置的变量 */
  setVariables: Record<string, string>
  /** 使用的变量 */
  usedVariables: string[]
  /** 未处理的模板 */
  unprocessedTemplates: string[]
  /** 处理错误 */
  errors: string[]
  /** 警告 */
  warnings: string[]
  /** 统计信息 */
  stats: {
    totalTemplates: number
    processedTemplates: number
    setVarCount: number
    getVarCount: number
    simpleVarCount: number
  }
}

/**
 * 支持的模板变量类型
 */
export const TEMPLATE_PATTERNS = {
  /** setvar 模板: {{setvar::variable::value}} - 支持嵌套模板 */
  SETVAR: /\{\{setvar::([^:]+)::((?:[^{}]|{{[^}]*}})*)\}\}/g,

  /** getvar 模板: {{getvar::variable}} */
  GETVAR: /\{\{getvar::([^}]+)\}\}/g,

  /** 简单变量: {{variable}} */
  SIMPLE: /\{\{([^:]+?)\}\}/g,

  /** 所有模板变量 - 支持嵌套模板 */
  ALL: /\{\{(?:[^{}]|{{[^}]*}})*\}\}/g,

  /** 注释: {{// comment}} */
  COMMENT: /\{\{\/\/([^}]*)\}\}/g,

  /** 条件语句: {{if::condition}}...{{endif}} */
  CONDITIONAL: /\{\{if::([^}]+)\}\}([\s\S]*?)\{\{endif\}\}/g,

  /** 循环语句: {{for::item in list}}...{{endfor}} */
  LOOP: /\{\{for::([^}]+)\}\}([\s\S]*?)\{\{endfor\}\}/g
} as const

/**
 * 模板变量验证模式
 */
export const templateVariableSchema = z.object({
  name: z.string().min(1),
  value: z.string(),
  type: z.enum(['setvar', 'getvar', 'simple']),
  line: z.number().optional(),
  source: z.string().optional()
})

export type TemplateVariableType = z.infer<typeof templateVariableSchema>

/**
 * 模板处理器类
 */
export class TemplateProcessor {
  private variables: Map<string, string> = new Map()
  private options: Required<TemplateProcessingOptions>
  private processingDepth = 0

  constructor(options: TemplateProcessingOptions = {}) {
    this.options = {
      strict: false,
      removeUnprocessed: false,
      variables: {},
      keepVariableDefinitions: false,
      maxRecursionDepth: 10,
      ...options
    }

    // 先设置常用的默认变量
    this.setDefaultVariables()

    // 然后设置用户变量（会覆盖默认变量）
    this.setVariables(this.options.variables)
  }

  /**
   * 设置常用的默认变量
   */
  private setDefaultVariables(): void {
    // 常用的系统变量 - 提供实际的默认值
    const now = new Date()
    this.setVariable('user', '用户') // 用户角色
    this.setVariable('char', '角色') // 角色
    this.setVariable('isodate', now.toISOString().split('T')[0]) // 当前日期 YYYY-MM-DD
    this.setVariable('isotime', now.toTimeString().split(' ')[0]) // 当前时间 HH:MM:SS (去掉时区信息)
    this.setVariable('idle_duration', '5分钟') // 默认空闲时间
    this.setVariable('lastUserMessage', '(上一条消息)') // 上一条用户消息
  }

  /**
   * 处理文本中的模板变量
   */
  processText(text: string): TemplateProcessingResult {
    const result: TemplateProcessingResult = {
      processedText: text,
      variables: [],
      setVariables: {},
      usedVariables: [],
      unprocessedTemplates: [],
      errors: [],
      warnings: [],
      stats: {
        totalTemplates: 0,
        processedTemplates: 0,
        setVarCount: 0,
        getVarCount: 0,
        simpleVarCount: 0
      }
    }

    try {
      this.processingDepth = 0

      // 第一步：解析所有模板变量
      this.parseAllTemplates(text, result)

      // 第二步：处理setvar变量
      this.processSetVariables(text, result)

      // 第三步：替换其他变量
      this.processVariableReplacement(text, result)

      // 第四步：处理特殊模板（注释、条件等）
      this.processSpecialTemplates(result)

      // 第五步：验证结果
      this.validateResult(result)

    } catch (error) {
      result.errors.push(`处理过程中发生错误: ${error instanceof Error ? error.message : String(error)}`)
    }

    return result
  }

  /**
   * 设置变量
   */
  setVariable(name: string, value: string | undefined): void {
    this.variables.set(name.trim(), value || '')
  }

  /**
   * 批量设置变量
   */
  setVariables(variables: Record<string, string>): void {
    Object.entries(variables).forEach(([name, value]) => {
      this.setVariable(name, value)
    })
  }

  /**
   * 获取变量值
   */
  getVariable(name: string): string | undefined {
    return this.variables.get(name.trim())
  }

  /**
   * 获取所有变量
   */
  getAllVariables(): Record<string, string> {
    return Object.fromEntries(this.variables)
  }

  /**
   * 清除所有变量
   */
  clearVariables(): void {
    this.variables.clear()
  }

  /**
   * 解析所有模板变量
   */
  private parseAllTemplates(text: string, result: TemplateProcessingResult): void {
    let match
    const allMatches = [...text.matchAll(TEMPLATE_PATTERNS.ALL)]

    result.stats.totalTemplates = allMatches.length

    allMatches.forEach((fullMatch, _index) => {
      const template = fullMatch[0]
      const lineNumber = this.getLineNumber(text, fullMatch.index!)

      // 检查setvar - 支持嵌套模板
      const setvarMatch = template.match(/^\{\{setvar::([^:]+)::((?:[^{}]|{{[^}]*}})*)\}\}$/)
      if (setvarMatch) {
        const [, name, value] = setvarMatch
        result.variables.push({
          name: name?.trim() || '',
          value: value?.trim() || '',
          type: 'setvar',
          line: lineNumber,
          source: template
        })
        result.stats.setVarCount++
        return
      }

      // 检查getvar
      const getvarMatch = template.match(/^\{\{getvar::([^}]+)\}\}$/)
      if (getvarMatch) {
        const [, name] = getvarMatch
        result.variables.push({
          name: name?.trim() || '',
          value: '',
          type: 'getvar',
          line: lineNumber,
          source: template
        })
        result.stats.getVarCount++
        return
      }

      // 检查注释
      if (template.startsWith('{{//')) {
        // 注释不计入变量统计
        return
      }

      // 简单变量
      const simpleMatch = template.match(/^\{\{([^:]+?)\}\}$/)
      if (simpleMatch) {
        const [, name] = simpleMatch
        result.variables.push({
          name: name?.trim() || '',
          value: '',
          type: 'simple',
          line: lineNumber,
          source: template
        })
        result.stats.simpleVarCount++
        return
      }

      // 未识别的模板
      result.warnings.push(`未识别的模板格式 (行 ${lineNumber}): ${template}`)
    })
  }

  /**
   * 处理setvar变量
   */
  private processSetVariables(text: string, result: TemplateProcessingResult): void {
    const setvarVariables = result.variables.filter(v => v.type === 'setvar')

    setvarVariables.forEach(variable => {
      // 处理变量值中的嵌套模板（如 {{user}}）
      let processedValue = variable.value
      const valueMatches = [...processedValue.matchAll(TEMPLATE_PATTERNS.SIMPLE)]

      valueMatches.forEach(match => {
        const varName = match[1]?.trim()
        if (varName) {
          const varValue = this.getVariable(varName)
          if (varValue !== undefined) {
            processedValue = processedValue.replace(match[0], varValue)
          }
        }
      })

      // 设置处理后的变量值
      this.setVariable(variable.name, processedValue)
      result.setVariables[variable.name] = processedValue

      // 如果不需要保留变量定义，则从文本中移除
      if (!this.options.keepVariableDefinitions) {
        result.processedText = result.processedText.replace(variable.source!, '')
      }

      result.stats.processedTemplates++
    })
  }

  /**
   * 处理变量替换
   */
  private processVariableReplacement(text: string, result: TemplateProcessingResult): void {
    this.processingDepth++

    if (this.processingDepth > this.options.maxRecursionDepth) {
      result.errors.push('递归深度超过限制')
      return
    }

    // 处理getvar
    result.processedText = result.processedText.replace(TEMPLATE_PATTERNS.GETVAR, (match, varName) => {
      const trimmedName = varName.trim()
      const value = this.getVariable(trimmedName)

      if (value !== undefined) {
        result.usedVariables.push(trimmedName)
        result.stats.processedTemplates++
        return value
      } else {
        if (this.options.strict) {
          result.errors.push(`未定义的变量: ${trimmedName}`)
        } else {
          result.warnings.push(`未定义的变量: ${trimmedName}`)
          result.unprocessedTemplates.push(match)
        }
        return this.options.removeUnprocessed ? '' : match
      }
    })

    // 处理简单变量
    result.processedText = result.processedText.replace(TEMPLATE_PATTERNS.SIMPLE, (match, varName) => {
      const trimmedName = varName.trim()

      // 跳过已经处理的setvar和getvar
      if (match.startsWith('{{setvar::') || match.startsWith('{{getvar::') || match.startsWith('{{//')) {
        return match
      }

      const value = this.getVariable(trimmedName)

      if (value !== undefined) {
        result.usedVariables.push(trimmedName)
        result.stats.processedTemplates++
        return value
      } else {
        if (this.options.strict) {
          result.errors.push(`未定义的变量: ${trimmedName}`)
        } else {
          result.warnings.push(`未定义的变量: ${trimmedName}`)
          result.unprocessedTemplates.push(match)
        }
        return this.options.removeUnprocessed ? '' : match
      }
    })

    this.processingDepth--
  }

  /**
   * 处理特殊模板
   */
  private processSpecialTemplates(result: TemplateProcessingResult): void {
    // 移除注释
    result.processedText = result.processedText.replace(TEMPLATE_PATTERNS.COMMENT, '')

    // TODO: 可以在这里添加条件语句、循环等的处理
    // 目前保持简单，只处理基本变量
  }

  /**
   * 验证处理结果
   */
  private validateResult(result: TemplateProcessingResult): void {
    // 检查是否还有未处理的模板
    const remainingTemplates = result.processedText.match(TEMPLATE_PATTERNS.ALL)
    if (remainingTemplates) {
      remainingTemplates.forEach(template => {
        if (!template.startsWith('{{//')) { // 忽略注释
          result.unprocessedTemplates.push(template)
        }
      })
    }

    // 生成统计报告
    const processedCount = result.stats.totalTemplates - result.unprocessedTemplates.length
    result.stats.processedTemplates = processedCount

    // 如果有未处理的模板且是严格模式，添加错误
    if (result.unprocessedTemplates.length > 0 && this.options.strict) {
      result.errors.push(`存在 ${result.unprocessedTemplates.length} 个未处理的模板`)
    }
  }

  /**
   * 获取文本中指定位置的行号
   */
  private getLineNumber(text: string, position: number): number {
    const before = text.substring(0, position)
    return (before.match(/\n/g) || []).length + 1
  }
}

/**
 * 便捷函数：处理模板变量
 */
export function processTemplateVariables(
  text: string,
  options?: TemplateProcessingOptions
): TemplateProcessingResult {
  const processor = new TemplateProcessor(options)
  return processor.processText(text)
}

/**
 * 便捷函数：简单变量替换
 */
export function replaceSimpleVariables(
  text: string,
  variables: Record<string, string>,
  options: Omit<TemplateProcessingOptions, 'variables'> = {}
): string {
  const processor = new TemplateProcessor({ ...options, variables })
  const result = processor.processText(text)
  return result.processedText
}

/**
 * 便捷函数：提取所有变量定义
 */
export function extractVariableDefinitions(text: string): Record<string, string> {
  const processor = new TemplateProcessor()
  const result = processor.processText(text)
  return result.setVariables
}

/**
 * 便捷函数：验证模板语法
 */
export function validateTemplateSyntax(text: string): {
  isValid: boolean
  errors: string[]
  warnings: string[]
  variables: TemplateVariable[]
} {
  const processor = new TemplateProcessor({ strict: true })
  const result = processor.processText(text)

  return {
    isValid: result.errors.length === 0,
    errors: result.errors,
    warnings: result.warnings,
    variables: result.variables
  }
}